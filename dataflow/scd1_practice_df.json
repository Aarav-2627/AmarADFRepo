{
	"name": "scd1_practice_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "SqlServer1",
						"type": "LinkedServiceReference"
					},
					"name": "emps"
				},
				{
					"linkedService": {
						"referenceName": "SqlServer1",
						"type": "LinkedServiceReference"
					},
					"name": "empt"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPNO as long,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as long,",
				"          HIREDATE as timestamp,",
				"          SAL as long,",
				"          COMM as long,",
				"          DEPTNO as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select * from [dbo].[Emp]',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> emps",
				"source(output(",
				"          EMPNO as long,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as long,",
				"          HIREDATE as timestamp,",
				"          SAL as long,",
				"          COMM as long,",
				"          DEPTNO as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select * from [dbo].[Emp_t]',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> empt",
				"emps, empt exists(emps@EMPNO == empt@EMPNO,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(flag = 'Inserted') ~> derivedColumn1",
				"emps, empt lookup(emps@EMPNO == empt@EMPNO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          EMPNOs = emps@EMPNO,",
				"          ENAMEs = emps@ENAME,",
				"          JOBs = emps@JOB,",
				"          MGRs = emps@MGR,",
				"          HIREDATEs = emps@HIREDATE,",
				"          SALs = emps@SAL,",
				"          COMMs = emps@COMM,",
				"          DEPTNOs = emps@DEPTNO,",
				"          EMPNO = empt@EMPNO,",
				"          ENAME = empt@ENAME,",
				"          JOB = empt@JOB,",
				"          MGR = empt@MGR,",
				"          HIREDATE = empt@HIREDATE,",
				"          SAL = empt@SAL,",
				"          COMM = empt@COMM,",
				"          DEPTNO = empt@DEPTNO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(ENAMEs!=ENAME||SALs!=SAL||COMMs!=COMM||JOBs!=JOB) ~> filter1",
				"filter1 derive(Flag = 'Updated') ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          EMPNO = EMPNOs,",
				"          ENAME = ENAMEs,",
				"          JOB = JOBs,",
				"          MGR = MGRs,",
				"          HIREDATE = HIREDATEs,",
				"          SAL = SALs,",
				"          COMM = COMMs,",
				"          DEPTNO = DEPTNOs,",
				"          Flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 alterRow(updateIf(1==1)) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPNO as long,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as long,",
				"          HIREDATE as timestamp,",
				"          SAL as long,",
				"          COMM as long,",
				"          DEPTNO as long,",
				"          Flag as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EMPNO,",
				"          ENAME,",
				"          JOB,",
				"          MGR,",
				"          HIREDATE,",
				"          SAL,",
				"          COMM,",
				"          DEPTNO,",
				"          Flag = flag",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPNO as long,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as long,",
				"          HIREDATE as timestamp,",
				"          SAL as long,",
				"          COMM as long,",
				"          DEPTNO as long,",
				"          Flag as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['EMPNO'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EMPNO,",
				"          ENAME,",
				"          JOB,",
				"          MGR,",
				"          HIREDATE,",
				"          SAL,",
				"          COMM,",
				"          DEPTNO,",
				"          Flag",
				"     )) ~> sink2"
			]
		}
	}
}