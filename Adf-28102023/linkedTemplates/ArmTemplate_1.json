{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Adf-28102023"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Loaddata_onpremssql_adls_PL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select * from dbo.Emp",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "onpremempds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl-onpremsql-couldsql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from [dbo].[Emp]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMPNO",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "EMPNO",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "ENAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ENAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JOB",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JOB",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MGR",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "MGR",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "HIREDATE",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "HIREDATE",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "SAL",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "SAL",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "COMM",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "COMM",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "DEPTNO",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "DEPTNO",
											"type": "Int64",
											"physicalType": "bigint"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "onpremempds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "onpremsqlserveremptable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremental load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "onpremempds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-27T20:46:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1_practice_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SqlServer1",
								"type": "LinkedServiceReference"
							},
							"name": "emps"
						},
						{
							"linkedService": {
								"referenceName": "SqlServer1",
								"type": "LinkedServiceReference"
							},
							"name": "empt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as long,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as long,",
						"          HIREDATE as timestamp,",
						"          SAL as long,",
						"          COMM as long,",
						"          DEPTNO as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from [dbo].[Emp]',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> emps",
						"source(output(",
						"          EMPNO as long,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as long,",
						"          HIREDATE as timestamp,",
						"          SAL as long,",
						"          COMM as long,",
						"          DEPTNO as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'select * from [dbo].[Emp_t]',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> empt",
						"emps, empt exists(emps@EMPNO == empt@EMPNO,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 derive(flag = 'Inserted') ~> derivedColumn1",
						"emps, empt lookup(emps@EMPNO == empt@EMPNO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          EMPNOs = emps@EMPNO,",
						"          ENAMEs = emps@ENAME,",
						"          JOBs = emps@JOB,",
						"          MGRs = emps@MGR,",
						"          HIREDATEs = emps@HIREDATE,",
						"          SALs = emps@SAL,",
						"          COMMs = emps@COMM,",
						"          DEPTNOs = emps@DEPTNO,",
						"          EMPNO = empt@EMPNO,",
						"          ENAME = empt@ENAME,",
						"          JOB = empt@JOB,",
						"          MGR = empt@MGR,",
						"          HIREDATE = empt@HIREDATE,",
						"          SAL = empt@SAL,",
						"          COMM = empt@COMM,",
						"          DEPTNO = empt@DEPTNO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(ENAMEs!=ENAME||SALs!=SAL||COMMs!=COMM||JOBs!=JOB) ~> filter1",
						"filter1 derive(Flag = 'Updated') ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          EMPNO = EMPNOs,",
						"          ENAME = ENAMEs,",
						"          JOB = JOBs,",
						"          MGR = MGRs,",
						"          HIREDATE = HIREDATEs,",
						"          SAL = SALs,",
						"          COMM = COMMs,",
						"          DEPTNO = DEPTNOs,",
						"          Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPNO as long,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as long,",
						"          HIREDATE as timestamp,",
						"          SAL as long,",
						"          COMM as long,",
						"          DEPTNO as long,",
						"          Flag as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPNO,",
						"          ENAME,",
						"          JOB,",
						"          MGR,",
						"          HIREDATE,",
						"          SAL,",
						"          COMM,",
						"          DEPTNO,",
						"          Flag = flag",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPNO as long,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as long,",
						"          HIREDATE as timestamp,",
						"          SAL as long,",
						"          COMM as long,",
						"          DEPTNO as long,",
						"          Flag as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['EMPNO'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPNO,",
						"          ENAME,",
						"          JOB,",
						"          MGR,",
						"          HIREDATE,",
						"          SAL,",
						"          COMM,",
						"          DEPTNO,",
						"          Flag",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd1_practice_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emps": {},
									"empt": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd1_practice_df')]"
			]
		}
	]
}